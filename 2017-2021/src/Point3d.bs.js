// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Tools = require("./Tools.bs.js");
var Belt_Id = require("rescript/lib/js/belt_Id.js");
var Pervasives = require("rescript/lib/js/pervasives.js");

function make(x, y, z) {
  return {
          x: x,
          y: y,
          z: z
        };
}

function x(p) {
  return p.x;
}

function y(p) {
  return p.y;
}

function z(p) {
  return p.z;
}

function fromArray(arr) {
  if (arr.length !== 3) {
    return ;
  }
  var x = arr[0];
  var y = arr[1];
  var z = arr[2];
  return {
          x: x,
          y: y,
          z: z
        };
}

function inRange(p, min, max) {
  if (p.x >= min.x && p.y >= min.y && p.z >= min.z && p.x <= max.x && p.y <= max.y) {
    return p.z <= max.z;
  } else {
    return false;
  }
}

function range(min, max) {
  return Tools.range(min.x, max.x).map(function (x) {
                  return Tools.range(min.y, max.y).map(function (y) {
                              return Tools.range(min.z, max.z).map(function (z) {
                                          return {
                                                  x: x,
                                                  y: y,
                                                  z: z
                                                };
                                        });
                            });
                }).flat().flat();
}

function rotateX(_point, _angle) {
  while(true) {
    var angle = _angle;
    var point = _point;
    var at90_x = point.x;
    var at90_y = point.z;
    var at90_z = -point.y | 0;
    var at90 = {
      x: at90_x,
      y: at90_y,
      z: at90_z
    };
    if (angle === 90) {
      return at90;
    }
    if (angle === 180) {
      _angle = 90;
      _point = at90;
      continue ;
    }
    if (angle !== 270) {
      return point;
    }
    _angle = 180;
    _point = at90;
    continue ;
  };
}

function rotateY(_point, _angle) {
  while(true) {
    var angle = _angle;
    var point = _point;
    var at90_x = -point.z | 0;
    var at90_y = point.y;
    var at90_z = point.x;
    var at90 = {
      x: at90_x,
      y: at90_y,
      z: at90_z
    };
    if (angle === 90) {
      return at90;
    }
    if (angle === 180) {
      _angle = 90;
      _point = at90;
      continue ;
    }
    if (angle !== 270) {
      return point;
    }
    _angle = 180;
    _point = at90;
    continue ;
  };
}

function rotateZ(_point, _angle) {
  while(true) {
    var angle = _angle;
    var point = _point;
    var at90_x = point.y;
    var at90_y = -point.x | 0;
    var at90_z = point.z;
    var at90 = {
      x: at90_x,
      y: at90_y,
      z: at90_z
    };
    if (angle === 90) {
      return at90;
    }
    if (angle === 180) {
      _angle = 90;
      _point = at90;
      continue ;
    }
    if (angle !== 270) {
      return point;
    }
    _angle = 180;
    _point = at90;
    continue ;
  };
}

function rotate(point, param) {
  return rotateZ(rotateY(rotateX(point, param[0]), param[1]), param[2]);
}

function distance(a, b) {
  return Math.sqrt(Math.pow(Pervasives.abs(a.x - b.x | 0), 2) + Math.pow(Pervasives.abs(a.y - b.y | 0), 2) + Math.pow(Pervasives.abs(a.z - b.z | 0), 2));
}

function manhattanDistance(a, b) {
  return (Pervasives.abs(a.x - b.x | 0) + Pervasives.abs(a.y - b.y | 0) | 0) + Pervasives.abs(a.z - b.z | 0) | 0;
}

function vector(from, to_) {
  return {
          x: to_.x - from.x | 0,
          y: to_.y - from.y | 0,
          z: to_.z - from.z | 0
        };
}

function translate(p, v) {
  return {
          x: p.x + v.x | 0,
          y: p.y + v.y | 0,
          z: p.z + v.z | 0
        };
}

function eq(a, b) {
  if (a.x === b.x && a.y === b.y) {
    return a.z === b.z;
  } else {
    return false;
  }
}

function cmp(a, b) {
  var c = a.x - b.x | 0;
  if (c !== 0) {
    return c;
  }
  var d = a.y - b.y | 0;
  if (d !== 0) {
    return d;
  } else {
    return a.z - b.z | 0;
  }
}

var Comparable = Belt_Id.MakeComparable({
      cmp: cmp
    });

function toString(p) {
  return "(" + p.x.toString() + ", " + p.y.toString() + ", " + p.z.toString() + ")";
}

exports.make = make;
exports.x = x;
exports.y = y;
exports.z = z;
exports.fromArray = fromArray;
exports.inRange = inRange;
exports.range = range;
exports.rotateX = rotateX;
exports.rotateY = rotateY;
exports.rotateZ = rotateZ;
exports.rotate = rotate;
exports.distance = distance;
exports.manhattanDistance = manhattanDistance;
exports.vector = vector;
exports.translate = translate;
exports.eq = eq;
exports.cmp = cmp;
exports.Comparable = Comparable;
exports.toString = toString;
/* Comparable Not a pure module */
