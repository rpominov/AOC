// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Tools = require("../Tools.bs.js");
var Pervasives = require("rescript/lib/js/pervasives.js");

function sumByDirection(f) {
  return ((((((f(-1, -1) + f(-1, 0) | 0) + f(-1, 1) | 0) + f(0, -1) | 0) + f(0, 1) | 0) + f(1, -1) | 0) + f(1, 0) | 0) + f(1, 1) | 0;
}

function countOccupied1(state, x, y) {
  return sumByDirection(function (xDir, yDir) {
              var row = Tools.$$Array.get(state, y + yDir | 0);
              if (row !== undefined && Tools.$$Array.get(row, x + xDir | 0) === /* Occupied */1) {
                return 1;
              } else {
                return 0;
              }
            });
}

function countOccupied2(state) {
  return function (x, y) {
    return sumByDirection(function (xDir, yDir) {
                var _x = x;
                var _y = y;
                while(true) {
                  var y$1 = _y;
                  var x$1 = _x;
                  var x$p = x$1 + xDir | 0;
                  var y$p = y$1 + yDir | 0;
                  var row = Tools.$$Array.get(state, y$p);
                  if (row === undefined) {
                    return 0;
                  }
                  var match = Tools.$$Array.get(row, x$p);
                  if (match === undefined) {
                    return 0;
                  }
                  switch (match) {
                    case /* Empty */0 :
                        return 0;
                    case /* Occupied */1 :
                        return 1;
                    case /* Floor */2 :
                        _y = y$p;
                        _x = x$p;
                        continue ;
                    
                  }
                };
              });
  };
}

function stepUntillStable(_state, countOccupied, intolerable) {
  while(true) {
    var state = _state;
    var countOccupied$p = Curry._1(countOccupied, state);
    var state$p = Tools.mapiPreserveRef(state, (function(countOccupied$p){
        return function (row, y) {
          return Tools.mapiPreserveRef(row, (function (val, x) {
                        switch (val) {
                          case /* Empty */0 :
                              if (Curry._2(countOccupied$p, x, y) === 0) {
                                return /* Occupied */1;
                              } else {
                                return val;
                              }
                          case /* Occupied */1 :
                              if (Curry._2(countOccupied$p, x, y) >= intolerable) {
                                return /* Empty */0;
                              } else {
                                return val;
                              }
                          case /* Floor */2 :
                              return val;
                          
                        }
                      }));
        }
        }(countOccupied$p)));
    if (state === state$p) {
      return state;
    }
    _state = state$p;
    continue ;
  };
}

AoC.getInput("2020", "11", (function (input) {
        var initilaState = Tools.lines(input).map(function (line) {
              return line.split("").map(function (x) {
                          switch (x) {
                            case "." :
                                return /* Floor */2;
                            case "L" :
                                return /* Empty */0;
                            default:
                              return Pervasives.failwith(x);
                          }
                        });
            });
        var __x = Tools.count(stepUntillStable(initilaState, countOccupied1, 4).flat(), (function (x) {
                return x === /* Occupied */1;
              }));
        console.log("part 1:", __x);
        var __x$1 = Tools.count(stepUntillStable(initilaState, countOccupied2, 5).flat(), (function (x) {
                return x === /* Occupied */1;
              }));
        console.log("part 2:", __x$1);
        
      }));

exports.sumByDirection = sumByDirection;
exports.countOccupied1 = countOccupied1;
exports.countOccupied2 = countOccupied2;
exports.stepUntillStable = stepUntillStable;
/*  Not a pure module */
