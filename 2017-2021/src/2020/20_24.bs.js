// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Point = require("../Point.bs.js");
var Tools = require("../Tools.bs.js");
var Belt_Set = require("rescript/lib/js/belt_Set.js");
var Pervasives = require("rescript/lib/js/pervasives.js");

function followDirections(_start, _data) {
  while(true) {
    var data = _data;
    var start = _start;
    var evenRow = start.y % 2 === 0;
    var match = Tools.$$Array.get(data, 0);
    var match$1 = Tools.$$Array.get(data, 1);
    var match$2;
    if (match !== undefined) {
      switch (match) {
        case "e" :
            match$2 = [
              1,
              0,
              1
            ];
            break;
        case "n" :
            if (match$1 !== undefined) {
              switch (match$1) {
                case "e" :
                    match$2 = [
                      evenRow ? 0 : 1,
                      -1,
                      2
                    ];
                    break;
                case "w" :
                    match$2 = [
                      evenRow ? -1 : 0,
                      -1,
                      2
                    ];
                    break;
                default:
                  match$2 = Pervasives.failwith("bad directions");
              }
            } else {
              match$2 = Pervasives.failwith("bad directions");
            }
            break;
        case "s" :
            if (match$1 !== undefined) {
              switch (match$1) {
                case "e" :
                    match$2 = [
                      evenRow ? 0 : 1,
                      1,
                      2
                    ];
                    break;
                case "w" :
                    match$2 = [
                      evenRow ? -1 : 0,
                      1,
                      2
                    ];
                    break;
                default:
                  match$2 = Pervasives.failwith("bad directions");
              }
            } else {
              match$2 = Pervasives.failwith("bad directions");
            }
            break;
        case "w" :
            match$2 = [
              -1,
              0,
              1
            ];
            break;
        default:
          match$2 = Pervasives.failwith("bad directions");
      }
    } else {
      match$2 = undefined;
    }
    if (match$2 === undefined) {
      return start;
    }
    _data = data.slice(match$2[2]);
    _start = Point.add(start, Point.make(match$2[0], match$2[1]));
    continue ;
  };
}

function neighborhood(start) {
  var evenRow = start.y % 2 === 0;
  return [
            Point.make(1, 0),
            Point.make(-1, 0),
            Point.make(evenRow ? -1 : 0, -1),
            Point.make(evenRow ? 0 : 1, -1),
            Point.make(evenRow ? -1 : 0, 1),
            Point.make(evenRow ? 0 : 1, 1)
          ].map(function (param) {
              return Point.add(start, param);
            });
}

function neighborhoodCount(start, points) {
  return Tools.count(neighborhood(start), (function (param) {
                return Belt_Set.has(points, param);
              }));
}

function step(points) {
  return Belt_Set.union(Belt_Set.keep(points, (function (p) {
                    var count = neighborhoodCount(p, points);
                    if (count === 1) {
                      return true;
                    } else {
                      return count === 2;
                    }
                  })), Belt_Set.keep(Belt_Set.fromArray(Belt_Set.toArray(points).flatMap(neighborhood), Point.Comparable), (function (p) {
                    return neighborhoodCount(p, points) === 2;
                  })));
}

function flip(set, v) {
  if (Belt_Set.has(set, v)) {
    return Belt_Set.remove(set, v);
  } else {
    return Belt_Set.add(set, v);
  }
}

AoC.getInput("2020", "24", (function (input_) {
        var initialPattern = Tools.reduce(Tools.lines(input_).map(function (line) {
                  var __x = line.split("");
                  return followDirections(Point.make(0, 0), __x);
                }), Belt_Set.make(Point.Comparable), flip);
        var __x = Belt_Set.size(initialPattern);
        console.log("part 1:", __x);
        var __x$1 = Belt_Set.size(Tools.reduce(Tools.range(1, 100), initialPattern, (function (acc, param) {
                    return step(acc);
                  })));
        console.log("part 2:", __x$1);
        
      }));

var $$Set;

exports.$$Set = $$Set;
exports.followDirections = followDirections;
exports.neighborhood = neighborhood;
exports.neighborhoodCount = neighborhoodCount;
exports.step = step;
exports.flip = flip;
/*  Not a pure module */
