// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Tools = require("../Tools.bs.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Belt_SetInt = require("rescript/lib/js/belt_SetInt.js");

function resultToString(result) {
  if (result.TAG === /* Loop */0) {
    return "Loop at " + result._0.toString() + ". Value = " + result._1.toString();
  } else {
    return "Out of range at " + result._0.toString() + ". Value = " + result._1.toString();
  }
}

function run(instructions) {
  var visited;
  var next = 0;
  var value = 0;
  while(!Belt_SetInt.has(visited, next) && next >= 0 && next < instructions.length) {
    visited = Belt_SetInt.add(visited, next);
    var x = Tools.exn(Tools.$$Array.get(instructions, next));
    switch (x.TAG | 0) {
      case /* Acc */0 :
          value = value + x._0 | 0;
          next = next + 1 | 0;
          break;
      case /* Jmp */1 :
          next = next + x._0 | 0;
          break;
      case /* Nop */2 :
          next = next + 1 | 0;
          break;
      
    }
  };
  if (Belt_SetInt.has(visited, next)) {
    return {
            TAG: /* Loop */0,
            _0: next,
            _1: value
          };
  } else {
    return {
            TAG: /* OutOfRange */1,
            _0: next,
            _1: value
          };
  }
}

AoC.getInput("2020", "8", (function (input_) {
        var input = Tools.lines(input_).map(function (line) {
              var match = line.split(" ");
              if (match.length !== 2) {
                return Pervasives.failwith("bad line: " + line);
              }
              var a = match[0];
              var b = match[1];
              switch (a) {
                case "acc" :
                    return {
                            TAG: /* Acc */0,
                            _0: parseInt(b, 10)
                          };
                case "jmp" :
                    return {
                            TAG: /* Jmp */1,
                            _0: parseInt(b, 10)
                          };
                case "nop" :
                    return {
                            TAG: /* Nop */2,
                            _0: parseInt(b, 10)
                          };
                default:
                  return Pervasives.failwith("bad line: " + line);
              }
            });
        console.log(resultToString(run(input)));
        input.some(function (x, i) {
              var modInstructions;
              switch (x.TAG | 0) {
                case /* Acc */0 :
                    modInstructions = undefined;
                    break;
                case /* Jmp */1 :
                    var y = x._0;
                    modInstructions = input.map(function (z, j, param) {
                          if (i === j) {
                            return {
                                    TAG: /* Nop */2,
                                    _0: y
                                  };
                          } else {
                            return z;
                          }
                        });
                    break;
                case /* Nop */2 :
                    var y$1 = x._0;
                    modInstructions = input.map(function (z, j, param) {
                          if (i === j) {
                            return {
                                    TAG: /* Jmp */1,
                                    _0: y$1
                                  };
                          } else {
                            return z;
                          }
                        });
                    break;
                
              }
              if (modInstructions === undefined) {
                return false;
              }
              var match = run(modInstructions);
              if (match.TAG === /* Loop */0 || match._0 !== modInstructions.length) {
                return false;
              } else {
                console.log(match._1);
                return true;
              }
            });
        
      }));

var $$Set;

exports.$$Set = $$Set;
exports.resultToString = resultToString;
exports.run = run;
/*  Not a pure module */
