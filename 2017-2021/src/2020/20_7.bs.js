// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Tools = require("../Tools.bs.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");

AoC.getInput("2020", "7", (function (input_) {
        var input = Tools.lines(input_).map(function (line) {
              var match = line.split(" bags contain ");
              if (match.length !== 2) {
                return Pervasives.failwith("bad line: " + line);
              }
              var a = match[0];
              var b = match[1];
              var tmp = b === "no other bags." ? [] : b.split(", ").map(function (y) {
                      var match = y.match(/^([0-9]+)\s(.+)\sbags?\.?$/);
                      if (match !== null && match.length === 3) {
                        var n = match[1];
                        var color = match[2];
                        return [
                                parseInt(n, 10),
                                color
                              ];
                      }
                      return Pervasives.failwith("bad line: " + line + " => " + y);
                    });
              return [
                      a,
                      tmp
                    ];
            });
        var findParents = function (color) {
          return Tools.filterMap(input, (function (param) {
                        if (param[1].some(function (param) {
                                return param[1] === color;
                              })) {
                          return param[0];
                        }
                        
                      }));
        };
        var getCompositions = function (color) {
          var parents = findParents(color);
          return parents.map(function (parent) {
                        return [[
                                    parent,
                                    color
                                  ]].concat(getCompositions(parent).map(function (comp) {
                                        return comp.concat([color]);
                                      }));
                      }).flat();
        };
        console.log(Belt_SetString.size(Belt_SetString.fromArray(getCompositions("shiny gold").flat())) - 1 | 0);
        var countChildren = function (color) {
          return Tools.reduce(Tools.exn(Caml_option.undefined_to_opt(input.find(function (param) {
                                      return param[0] === color;
                                    })))[1].map(function (param) {
                          var n = param[0];
                          return n + Math.imul(n, countChildren(param[1])) | 0;
                        }), 0, (function (prim0, prim1) {
                        return prim0 + prim1 | 0;
                      }));
        };
        console.log(countChildren("shiny gold"));
        
      }));

var $$Set;

exports.$$Set = $$Set;
/*  Not a pure module */
