// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Tools = require("../Tools.bs.js");
var Belt_Id = require("rescript/lib/js/belt_Id.js");
var Belt_Set = require("rescript/lib/js/belt_Set.js");

function comparePoints(a, b) {
  var c = a.x - b.x | 0;
  if (c !== 0) {
    return c;
  }
  var d = a.y - b.y | 0;
  if (d !== 0) {
    return d;
  }
  var e = a.z - b.z | 0;
  if (e !== 0) {
    return e;
  } else {
    return a.w - b.w | 0;
  }
}

var PointComparator = Belt_Id.MakeComparable({
      cmp: comparePoints
    });

function fromArray(__x) {
  return Belt_Set.fromArray(__x, PointComparator);
}

function neighbourhood(point) {
  return [
                -1,
                0,
                1
              ].map(function (x) {
                  return [
                            -1,
                            0,
                            1
                          ].map(function (y) {
                              return [
                                        -1,
                                        0,
                                        1
                                      ].map(function (z) {
                                          return [0].map(function (w) {
                                                      return {
                                                              x: point.x + x | 0,
                                                              y: point.y + y | 0,
                                                              z: point.z + z | 0,
                                                              w: point.w + w | 0
                                                            };
                                                    });
                                        });
                            });
                }).flat(3).filter(function (p) {
              return comparePoints(p, point) !== 0;
            });
}

function step(active) {
  var toConsider = Belt_Set.toArray(Belt_Set.fromArray(Belt_Set.toArray(active).flatMap(function (point) {
                return neighbourhood(point).concat([point]);
              }), PointComparator));
  return Belt_Set.fromArray(toConsider.filter(function (point) {
                  var activeNeighbours = Tools.count(neighbourhood(point), (function (param) {
                          return Belt_Set.has(active, param);
                        }));
                  var match = Belt_Set.has(active, point);
                  if (match && activeNeighbours === 2) {
                    return true;
                  } else {
                    return activeNeighbours === 3;
                  }
                }), PointComparator);
}

AoC.getInput("2020", "17", (function (input_) {
        var initilaActive = Belt_Set.fromArray(Tools.filterMap(Tools.lines(input_).map(function (line, y, param) {
                        return line.split("").map(function (v, x, param) {
                                    if (v === "#") {
                                      return {
                                              x: x,
                                              y: y,
                                              z: 0,
                                              w: 0
                                            };
                                    }
                                    
                                  });
                      }).flat(), (function (a) {
                    return a;
                  })), PointComparator);
        console.log(Belt_Set.size(step(step(step(step(step(step(initilaActive))))))));
        
      }));

var $$Set;

exports.$$Set = $$Set;
exports.comparePoints = comparePoints;
exports.PointComparator = PointComparator;
exports.fromArray = fromArray;
exports.neighbourhood = neighbourhood;
exports.step = step;
/* PointComparator Not a pure module */
