// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Tools = require("./Tools.bs.js");
var Belt_Id = require("rescript/lib/js/belt_Id.js");

function make(x, y) {
  return {
          x: x,
          y: y
        };
}

function x(p) {
  return p.x;
}

function y(p) {
  return p.y;
}

function toPair(p) {
  return [
          p.x,
          p.y
        ];
}

function add(a, b) {
  return {
          x: a.x + b.x | 0,
          y: a.y + b.y | 0
        };
}

function shiftBy(p, param) {
  return {
          x: p.x + param[0] | 0,
          y: p.y + param[1] | 0
        };
}

function inRange(p, min, max) {
  if (p.x >= min.x && p.y >= min.y && p.x <= max.x) {
    return p.y <= max.y;
  } else {
    return false;
  }
}

function eq(a, b) {
  if (a.x === b.x) {
    return a.y === b.y;
  } else {
    return false;
  }
}

function cmp(a, b) {
  var c = a.x - b.x | 0;
  if (c !== 0) {
    return c;
  } else {
    return a.y - b.y | 0;
  }
}

var Comparable = Belt_Id.MakeComparable({
      cmp: cmp
    });

function hash(p) {
  return (p.x << 15) + p.y | 0;
}

var Hashable = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });

function arrAt(arr, point) {
  var line = Tools.$$Array.get(arr, point.y);
  if (line !== undefined) {
    return Tools.$$Array.get(line, point.x);
  }
  
}

exports.make = make;
exports.x = x;
exports.y = y;
exports.toPair = toPair;
exports.add = add;
exports.shiftBy = shiftBy;
exports.inRange = inRange;
exports.eq = eq;
exports.cmp = cmp;
exports.Comparable = Comparable;
exports.Hashable = Hashable;
exports.arrAt = arrAt;
/* Comparable Not a pure module */
