// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Caml = require("rescript/lib/js/caml.js");
var Tools = require("../Tools.bs.js");
var Js_int = require("rescript/lib/js/js_int.js");
var Belt_Id = require("rescript/lib/js/belt_Id.js");
var Belt_Map = require("rescript/lib/js/belt_Map.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

var cmp = Caml.caml_string_compare;

var NodeCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

var arr = [
  [
    "h1",
    "h2",
    "h3",
    "a2"
  ],
  [
    "h1",
    "h2",
    "h3",
    "a2",
    "a1"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "b2"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "b2",
    "b1"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c2"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c2",
    "c1"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d2"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d2",
    "d1"
  ],
  [
    "h2",
    "h3",
    "a2"
  ],
  [
    "h2",
    "h3",
    "a2",
    "a1"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "b2"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "b2",
    "b1"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c2"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c2",
    "c1"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d2"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d2",
    "d1"
  ],
  [
    "h4",
    "h3",
    "a2"
  ],
  [
    "h4",
    "h3",
    "a2",
    "a1"
  ],
  [
    "h4",
    "h5",
    "b2"
  ],
  [
    "h4",
    "h5",
    "b2",
    "b1"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "c2"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "c2",
    "c1"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d2"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d2",
    "d1"
  ],
  [
    "h6",
    "h5",
    "b2"
  ],
  [
    "h6",
    "h5",
    "b2",
    "b1"
  ],
  [
    "h6",
    "h5",
    "h4",
    "h3",
    "a2"
  ],
  [
    "h6",
    "h5",
    "h4",
    "h3",
    "a2",
    "a1"
  ],
  [
    "h6",
    "h7",
    "c2"
  ],
  [
    "h6",
    "h7",
    "c2",
    "c1"
  ],
  [
    "h6",
    "h7",
    "h8",
    "h9",
    "d2"
  ],
  [
    "h6",
    "h7",
    "h8",
    "h9",
    "d2",
    "d1"
  ],
  [
    "h8",
    "h7",
    "c2"
  ],
  [
    "h8",
    "h7",
    "c2",
    "c1"
  ],
  [
    "h8",
    "h7",
    "h6",
    "h5",
    "b2"
  ],
  [
    "h8",
    "h7",
    "h6",
    "h5",
    "b2",
    "b1"
  ],
  [
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a2"
  ],
  [
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a2",
    "a1"
  ],
  [
    "h8",
    "h9",
    "d2"
  ],
  [
    "h8",
    "h9",
    "d2",
    "d1"
  ],
  [
    "h10",
    "h9",
    "d2"
  ],
  [
    "h10",
    "h9",
    "d2",
    "d1"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "c2"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "c2",
    "c1"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b2"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b2",
    "b1"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a2"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a2",
    "a1"
  ],
  [
    "h11",
    "h10",
    "h9",
    "d2"
  ],
  [
    "h11",
    "h10",
    "h9",
    "d2",
    "d1"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "c2"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "c2",
    "c1"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b2"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b2",
    "b1"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a2"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a2",
    "a1"
  ]
];

var paths = arr.concat(arr.map(Belt_Array.reverse)).map(function (p) {
      return [
              Tools.exn(Tools.$$Array.get(p, 0)),
              Tools.last(p),
              p.slice(1)
            ];
    });

function getCost(pod) {
  if (pod === "b") {
    return 10;
  } else if (pod === "c") {
    return 100;
  } else if (pod === "d") {
    return 1000;
  } else {
    return 1;
  }
}

function classify(node) {
  if (node === "a2") {
    return {
            NAME: "top",
            VAL: [
              "a",
              "a1"
            ]
          };
  } else if (node === "b1") {
    return {
            NAME: "bottom",
            VAL: "b"
          };
  } else if (node === "b2") {
    return {
            NAME: "top",
            VAL: [
              "b",
              "b1"
            ]
          };
  } else if (node === "c1") {
    return {
            NAME: "bottom",
            VAL: "c"
          };
  } else if (node === "c2") {
    return {
            NAME: "top",
            VAL: [
              "c",
              "c1"
            ]
          };
  } else if (node === "d1") {
    return {
            NAME: "bottom",
            VAL: "d"
          };
  } else if (node === "d2") {
    return {
            NAME: "top",
            VAL: [
              "d",
              "d1"
            ]
          };
  } else if (node === "h11" || node === "h10" || node === "h9" || node === "h8" || node === "h7" || node === "h6" || node === "h5" || node === "h4" || node === "h3" || node === "h2" || node === "h1") {
    return "hallway";
  } else {
    return {
            NAME: "bottom",
            VAL: "a"
          };
  }
}

function canStartAt(pod, pos, state) {
  var match = classify(pos);
  if (typeof match !== "object") {
    return true;
  }
  var variant = match.NAME;
  if (variant === "bottom") {
    return pod !== match.VAL;
  }
  if (variant !== "top") {
    return true;
  }
  var match$1 = match.VAL;
  if (pod === match$1[0]) {
    return Belt_Map.get(state, match$1[1]) !== pod;
  } else {
    return true;
  }
}

function canEndAt(pod, pos, state) {
  var match = classify(pos);
  if (typeof match === "object") {
    var variant = match.NAME;
    if (variant === "bottom") {
      if (pod !== match.VAL) {
        return false;
      }
      
    } else if (variant === "top" && pod !== match.VAL[0]) {
      return false;
    }
    
  }
  if (typeof match === "object" && match.NAME === "top") {
    return Belt_Map.get(state, match.VAL[1]) === pod;
  } else {
    return true;
  }
}

function allowedPaths(state) {
  return Belt_Map.toArray(state).map(function (param) {
                var pod = param[1];
                var node = param[0];
                if (canStartAt(pod, node, state)) {
                  return paths.filter(function (param) {
                              if (param[0] === node && canEndAt(pod, param[1], state)) {
                                return param[2].every(function (n) {
                                            return !Belt_Map.has(state, n);
                                          });
                              } else {
                                return false;
                              }
                            });
                } else {
                  return [];
                }
              }).flat();
}

function isDone(state) {
  return Belt_Map.every(state, (function (k, v) {
                var match = classify(k);
                if (typeof match !== "object") {
                  return false;
                }
                var variant = match.NAME;
                if (variant === "bottom") {
                  return match.VAL === v;
                } else if (variant === "top") {
                  return match.VAL[0] === v;
                } else {
                  return false;
                }
              }));
}

function minCost(state) {
  return Belt_Map.reduce(state, 0, (function (acc, k, v) {
                return acc + Math.imul(k === "a1" ? (
                              v === "a" ? 0 : (
                                  v === "b" ? 5 : 6
                                )
                            ) : (
                              k === "a2" ? (
                                  v === "a" ? 0 : (
                                      v === "b" ? 4 : 6
                                    )
                                ) : (
                                  k === "b1" ? (
                                      v === "c" || v === "a" ? 5 : (
                                          v === "b" ? 0 : 6
                                        )
                                    ) : (
                                      k === "b2" ? (
                                          v === "c" || v === "a" ? 4 : (
                                              v === "b" ? 0 : 6
                                            )
                                        ) : (
                                          k === "c1" ? (
                                              v === "d" || v === "b" ? 5 : (
                                                  v === "c" ? 0 : 6
                                                )
                                            ) : (
                                              k === "c2" ? (
                                                  v === "d" || v === "b" ? 4 : (
                                                      v === "c" ? 0 : 6
                                                    )
                                                ) : (
                                                  k === "d1" ? (
                                                      v === "c" ? 5 : (
                                                          v === "d" ? 0 : 6
                                                        )
                                                    ) : (
                                                      k === "d2" ? (
                                                          v === "c" ? 4 : (
                                                              v === "d" ? 0 : 6
                                                            )
                                                        ) : (
                                                          k === "h1" ? (
                                                              v === "a" ? 3 : (
                                                                  v === "b" ? 5 : 6
                                                                )
                                                            ) : (
                                                              k === "h2" ? (
                                                                  v === "a" ? 2 : (
                                                                      v === "b" ? 4 : 6
                                                                    )
                                                                ) : (
                                                                  k === "h4" ? (
                                                                      v === "b" || v === "a" ? 2 : (
                                                                          v === "c" ? 4 : 6
                                                                        )
                                                                    ) : (
                                                                      k === "h6" ? (
                                                                          v === "c" || v === "b" ? 2 : 4
                                                                        ) : (
                                                                          k === "h8" ? (
                                                                              v === "b" ? 4 : (
                                                                                  v === "d" || v === "c" ? 2 : 6
                                                                                )
                                                                            ) : (
                                                                              k === "h10" ? (
                                                                                  v === "c" ? 4 : (
                                                                                      v === "d" ? 2 : 6
                                                                                    )
                                                                                ) : (
                                                                                  k === "h11" ? (
                                                                                      v === "c" ? 5 : (
                                                                                          v === "d" ? 3 : 6
                                                                                        )
                                                                                    ) : 6
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            ), getCost(v)) | 0;
              }));
}

function findBest(_best, _jobs) {
  while(true) {
    var jobs = _jobs;
    var best = _best;
    var match = Tools.$$Array.get(jobs, 0);
    if (match === undefined) {
      return best;
    }
    var state = match[1];
    var cost = match[0];
    var jobs$p = jobs.slice(1);
    if (isDone(state)) {
      console.log(cost);
      _jobs = jobs$p;
      _best = cost;
      continue ;
    }
    if ((cost + minCost(state) | 0) >= best) {
      _jobs = jobs$p;
      continue ;
    }
    var paths = allowedPaths(state);
    if (paths.length !== 0) {
      _jobs = Tools.filterMap(paths, (function(best,cost,state){
            return function (param) {
              var first = param[0];
              var pod = Belt_Map.get(state, first);
              var cost$p = cost + Math.imul(param[2].length, getCost(pod)) | 0;
              if (best <= cost$p) {
                return ;
              }
              var state$p = Belt_Map.set(Belt_Map.remove(state, first), param[1], pod);
              return [
                      cost$p,
                      state$p
                    ];
            }
            }(best,cost,state))).concat(jobs$p);
      continue ;
    }
    _jobs = jobs$p;
    continue ;
  };
}

AoC.getInput("2021", "23", (function (input) {
        var initialState = Belt_Map.fromArray(Belt_Array.zip([
                  "a2",
                  "b2",
                  "c2",
                  "d2",
                  "a1",
                  "b1",
                  "c1",
                  "d1"
                ], Tools.filterMap(input.split(""), (function (ch) {
                        switch (ch) {
                          case "A" :
                              return "a";
                          case "B" :
                              return "b";
                          case "C" :
                              return "c";
                          case "D" :
                              return "d";
                          default:
                            return ;
                        }
                      }))), NodeCmp);
        console.log(findBest(Js_int.max, [[
                    0,
                    initialState
                  ]]));
        
      }));

var $$Map;

exports.$$Map = $$Map;
exports.NodeCmp = NodeCmp;
exports.paths = paths;
exports.getCost = getCost;
exports.classify = classify;
exports.canStartAt = canStartAt;
exports.canEndAt = canEndAt;
exports.allowedPaths = allowedPaths;
exports.isDone = isDone;
exports.minCost = minCost;
exports.findBest = findBest;
/* NodeCmp Not a pure module */
