// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Tools = require("../Tools.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Pervasives = require("rescript/lib/js/pervasives.js");

function range(min, max) {
  if (min <= max) {
    return Belt_Array.range(min, max);
  } else {
    return Belt_Array.reverse(Belt_Array.range(max, min));
  }
}

AoC.getInput("2021", "17", (function (input_) {
        var match = input_.trim().replace("target area: ", "").split(", ").map(function (a) {
              return Tools.exn(Tools.$$Array.get(a.split("="), 1)).split("..").map(function (prim) {
                          return parseInt(prim, 10);
                        });
            });
        var match$1;
        if (match.length !== 2) {
          match$1 = Pervasives.failwith("Cant parse: " + input_);
        } else {
          var match$2 = match[0];
          if (match$2.length !== 2) {
            match$1 = Pervasives.failwith("Cant parse: " + input_);
          } else {
            var minX = match$2[0];
            var maxX = match$2[1];
            var match$3 = match[1];
            if (match$3.length !== 2) {
              match$1 = Pervasives.failwith("Cant parse: " + input_);
            } else {
              var minY = match$3[0];
              var maxY = match$3[1];
              match$1 = [
                minX,
                maxX,
                minY,
                maxY
              ];
            }
          }
        }
        var maxY$1 = match$1[3];
        var minY$1 = match$1[2];
        var maxX$1 = match$1[1];
        var minX$1 = match$1[0];
        var maxY_ifHit = function (_vel, _pos, _max) {
          while(true) {
            var max = _max;
            var pos = _pos;
            var vel = _vel;
            var pos$p = pos + vel | 0;
            var max$p = Math.max(pos$p, max);
            if (pos$p <= maxY$1 && pos$p >= minY$1) {
              return {
                      TAG: /* Ok */0,
                      _0: max$p
                    };
            }
            if (pos$p < minY$1) {
              return {
                      TAG: /* Error */1,
                      _0: pos
                    };
            }
            _max = max$p;
            _pos = pos$p;
            _vel = vel - 1 | 0;
            continue ;
          };
        };
        var getMaxY = function (_vel, _max) {
          while(true) {
            var max = _max;
            var vel = _vel;
            var v = maxY_ifHit(vel, 0, 0);
            if (v.TAG === /* Ok */0) {
              _max = v._0;
              _vel = vel + 1 | 0;
              continue ;
            }
            if (v._0 === 0) {
              return max;
            }
            _vel = vel + 1 | 0;
            continue ;
          };
        };
        console.log(getMaxY(0, 0));
        var doesHit = function (_traceOpt, _vx, _vy, _px, _py) {
          while(true) {
            var traceOpt = _traceOpt;
            var py = _py;
            var px = _px;
            var vy = _vy;
            var vx = _vx;
            var trace = traceOpt !== undefined ? traceOpt : false;
            var px$p = px + vx | 0;
            var py$p = py + vy | 0;
            var vx$p = vx === 0 ? 0 : vx - 1 | 0;
            var vy$p = vy - 1 | 0;
            if (trace) {
              console.log([
                    px$p,
                    py$p
                  ]);
            }
            if (vx === 0 && px$p < minX$1) {
              return "didn_reach";
            }
            if (px$p > maxX$1 && px === 0) {
              return "went_over_x0";
            }
            if (py$p < minY$1 && py === 0) {
              return "went_over_y0";
            }
            if (py$p < minY$1) {
              return "went_over_y1";
            }
            if (px$p > maxX$1) {
              return "went_over_x1";
            }
            if (px$p >= minX$1 && px$p <= maxX$1 && py$p <= maxY$1 && py$p >= minY$1) {
              return "hit";
            }
            _py = py$p;
            _px = px$p;
            _vy = vy$p;
            _vx = vx$p;
            _traceOpt = trace;
            continue ;
          };
        };
        var getYs1 = function (_acc, x) {
          while(true) {
            var acc = _acc;
            var y = acc.length + 1 | 0;
            var outcome = doesHit(undefined, x, y, 0, 0);
            var acc$p = acc.concat([outcome]);
            if (outcome === "didn_reach" || outcome === "went_over_y0" || outcome === "went_over_x1" || outcome === "went_over_x0") {
              return acc$p;
            }
            _acc = acc$p;
            continue ;
          };
        };
        var getYs2 = function (_acc, x) {
          while(true) {
            var acc = _acc;
            var y = Math.imul(acc.length, -1);
            var outcome = doesHit(undefined, x, y, 0, 0);
            var acc$p = acc.concat([outcome]);
            if (outcome === "went_over_x1") {
              console.log("" + x + ", " + y + " ===== went_over_x1");
              doesHit(true, x, y, 0, 0);
              console.log("============");
            }
            if (outcome === "hit") {
              console.log("" + x + ", " + y + " ===== hit");
              doesHit(true, x, y, 0, 0);
              console.log("============");
            }
            if (outcome === "didn_reach" || outcome === "went_over_y0" || outcome === "went_over_x0") {
              return acc$p;
            }
            _acc = acc$p;
            continue ;
          };
        };
        console.log(range(1, maxX$1).map(function (x) {
                      return getYs2([], x).concat(getYs1([], x));
                    }).flat().filter(function (a) {
                  return a === "hit";
                }).length);
        
      }));

exports.range = range;
/*  Not a pure module */
