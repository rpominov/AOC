// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Tools = require("../Tools.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");

function atCoord(arr, x, y) {
  return Belt_Option.getWithDefault(Belt_Option.flatMap(Tools.$$Array.get(arr, y), (function (row) {
                    return Tools.$$Array.get(row, x);
                  })), 9);
}

AoC.getInput("2021", "9", (function (input_) {
        var input = Tools.lines(input_).map(function (line) {
              return line.split("").map(function (prim) {
                          return parseInt(prim, 10);
                        });
            });
        var isLow = function (v, x, y) {
          if (v < atCoord(input, x - 1 | 0, y) && v < atCoord(input, x + 1 | 0, y) && v < atCoord(input, x, y - 1 | 0)) {
            return v < atCoord(input, x, y + 1 | 0);
          } else {
            return false;
          }
        };
        console.log(Tools.reduce(input.map(function (row, y, param) {
                        return row.map(function (el, x, param) {
                                    if (isLow(el, x, y)) {
                                      return el + 1 | 0;
                                    } else {
                                      return 0;
                                    }
                                  });
                      }).flat(), 0, (function (prim0, prim1) {
                    return prim0 + prim1 | 0;
                  })));
        var helper = function (acc, el, x, y) {
          var v = atCoord(input, x, y);
          if (v !== 9 && v > el) {
            return basin(acc, v, x, y);
          } else {
            return acc;
          }
        };
        var basin = function (acc, el, x, y) {
          return helper(helper(helper(helper(Belt_SetString.add(acc, x.toString() + "," + y.toString()), el, x - 1 | 0, y), el, x + 1 | 0, y), el, x, y - 1 | 0), el, x, y + 1 | 0);
        };
        console.log(Tools.reduce(Tools.sort(input.map(function (row, y, param) {
                              return row.map(function (el, x, param) {
                                          if (isLow(el, x, y)) {
                                            return Belt_SetString.size(basin(undefined, el, x, y));
                                          } else {
                                            return 0;
                                          }
                                        });
                            }).flat(), (function (a, b) {
                          return b - a | 0;
                        })).slice(0, 3), 1, (function (prim0, prim1) {
                    return Math.imul(prim0, prim1);
                  })));
        
      }));

var $$Option;

var $$Set;

exports.$$Option = $$Option;
exports.$$Set = $$Set;
exports.atCoord = atCoord;
/*  Not a pure module */
