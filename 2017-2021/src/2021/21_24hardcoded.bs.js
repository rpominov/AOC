// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Pervasives = require("rescript/lib/js/pervasives.js");

function f1(p2, p3, z, i) {
  if (z % 26 + p2 === i) {
    return z;
  } else {
    return i + p3 + z * 26;
  }
}

function f26(p2, p3, z, i) {
  var z$p = Math.trunc(z / 26);
  var mod = z - z$p;
  if (mod + p2 === i) {
    return z$p;
  } else {
    return i + p3 + z$p * 26;
  }
}

for(var x1 = 9; x1 >= 1; --x1){
  var z = f1(12, 6, 0, x1);
  for(var x2 = 9; x2 >= 1; --x2){
    var z$1 = f1(10, 6, z, x2);
    for(var x3 = 9; x3 >= 1; --x3){
      var z$2 = f1(13, 3, z$1, x3);
      for(var x4 = 9; x4 >= 1; --x4){
        var z$3 = f26(-11, 11, z$2, x4);
        for(var x5 = 9; x5 >= 1; --x5){
          var z$4 = f1(13, 9, z$3, x5);
          console.log("" + x1 + x2 + x3 + x4 + x5);
          for(var x6 = 9; x6 >= 1; --x6){
            var z$5 = f26(-1, 3, z$4, x6);
            for(var x7 = 9; x7 >= 1; --x7){
              var z$6 = f1(10, 13, z$5, x7);
              for(var x8 = 9; x8 >= 1; --x8){
                var z$7 = f1(11, 6, z$6, x8);
                for(var x9 = 9; x9 >= 1; --x9){
                  var z$8 = f26(0, 14, z$7, x9);
                  for(var x10 = 9; x10 >= 1; --x10){
                    var z$9 = f1(10, 10, z$8, x10);
                    for(var x11 = 9; x11 >= 1; --x11){
                      var z$10 = f26(-5, 12, z$9, x11);
                      for(var x12 = 9; x12 >= 1; --x12){
                        var z$11 = f26(-16, 10, z$10, x12);
                        for(var x13 = 9; x13 >= 1; --x13){
                          var z$12 = f26(-7, 11, z$11, x13);
                          for(var x14 = 9; x14 >= 1; --x14){
                            var z$13 = f26(-11, 15, z$12, x14);
                            if (z$13 === 0) {
                              Pervasives.failwith([
                                        x1,
                                        x2,
                                        x3,
                                        x4,
                                        x5,
                                        x6,
                                        x7,
                                        x8,
                                        x9,
                                        x10,
                                        x11,
                                        x12,
                                        x13,
                                        x14
                                      ].map(function (prim) {
                                          return prim.toString();
                                        }).join(""));
                            }
                            
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

var z$14 = 0;

exports.f1 = f1;
exports.f26 = f26;
exports.z = z$14;
/*  Not a pure module */
