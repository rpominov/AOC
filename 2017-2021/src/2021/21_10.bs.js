// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Int64 = require("rescript/lib/js/int64.js");
var Tools = require("../Tools.bs.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Caml_int64 = require("rescript/lib/js/caml_int64.js");
var Pervasives = require("rescript/lib/js/pervasives.js");

function isOpen(symbol) {
  switch (symbol) {
    case "(" :
    case "<" :
    case "[" :
    case "{" :
        return true;
    default:
      return false;
  }
}

function isPair(cl, op) {
  switch (cl) {
    case ")" :
        if (op === "(") {
          return true;
        } else {
          return false;
        }
    case ">" :
        if (op === "<") {
          return true;
        } else {
          return false;
        }
    case "]" :
        if (op === "[") {
          return true;
        } else {
          return false;
        }
    case "}" :
        if (op === "{") {
          return true;
        } else {
          return false;
        }
    default:
      return false;
  }
}

function getErrPoints(closeSymbol) {
  switch (closeSymbol) {
    case ")" :
        return 3;
    case ">" :
        return 25137;
    case "]" :
        return 57;
    case "}" :
        return 1197;
    default:
      return Pervasives.failwith(closeSymbol);
  }
}

function getCompPoints(openSymbol) {
  switch (openSymbol) {
    case "(" :
        return 1;
    case "<" :
        return 4;
    case "[" :
        return 2;
    case "{" :
        return 3;
    default:
      return Pervasives.failwith(openSymbol);
  }
}

AoC.getInput("2021", "10", (function (input) {
        var intermediate = Tools.lines(input).map(function (line) {
              return Tools.reduce(line.split(""), {
                          TAG: /* Ok */0,
                          _0: /* [] */0
                        }, (function (acc, symbol) {
                            if (acc.TAG !== /* Ok */0) {
                              return acc;
                            }
                            var stack = acc._0;
                            if (isOpen(symbol)) {
                              return {
                                      TAG: /* Ok */0,
                                      _0: {
                                        hd: symbol,
                                        tl: stack
                                      }
                                    };
                            } else if (stack && isPair(symbol, stack.hd)) {
                              return {
                                      TAG: /* Ok */0,
                                      _0: stack.tl
                                    };
                            } else {
                              return {
                                      TAG: /* Error */1,
                                      _0: symbol
                                    };
                            }
                          }));
            });
        console.log(Tools.reduce(intermediate.map(function (x) {
                      if (x.TAG === /* Ok */0) {
                        return 0;
                      } else {
                        return getErrPoints(x._0);
                      }
                    }), 0, (function (prim0, prim1) {
                    return prim0 + prim1 | 0;
                  })));
        var arr = Tools.sort(Tools.filterMap(intermediate, (function (x) {
                    if (x.TAG === /* Ok */0) {
                      return Belt_List.reduce(x._0, Int64.zero, (function (acc, x) {
                                    return Caml_int64.add(Caml_int64.mul(acc, [
                                                    0,
                                                    5
                                                  ]), Caml_int64.of_int32(getCompPoints(x)));
                                  }));
                    }
                    
                  })), Int64.compare);
        console.log(Int64.to_string(Tools.exn(Tools.$$Array.get(arr, (arr.length - 1 | 0) / 2 | 0))));
        
      }));

exports.isOpen = isOpen;
exports.isPair = isPair;
exports.getErrPoints = getErrPoints;
exports.getCompPoints = getCompPoints;
/*  Not a pure module */
