// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Tools = require("../Tools.bs.js");
var Belt_Id = require("rescript/lib/js/belt_Id.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_HashMap = require("rescript/lib/js/belt_HashMap.js");

function hash(param) {
  return Math.imul(param[0], 10000000) + param[1] | 0;
}

function eq(param, param$1) {
  if (Caml_obj.caml_equal(param[0], param$1[0])) {
    return Caml_obj.caml_equal(param[1], param$1[1]);
  } else {
    return false;
  }
}

var PointHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });

function go(from, dest, step) {
  if (from < dest) {
    return from + step | 0;
  } else {
    return from - step | 0;
  }
}

AoC.getInput("2021", "5", (function (input_) {
        var input = Tools.lines(input_).map(function (line) {
              var points = line.split(" -> ").map(function (point) {
                    var xy = point.split(",").map(function (prim) {
                          return parseInt(prim, 10);
                        });
                    return [
                            Tools.exn(Tools.$$Array.get(xy, 0)),
                            Tools.exn(Tools.$$Array.get(xy, 1))
                          ];
                  });
              return [
                      Tools.exn(Tools.$$Array.get(points, 0)),
                      Tools.exn(Tools.$$Array.get(points, 1))
                    ];
            });
        var coveredPoints = Belt_HashMap.make(100000, PointHash);
        var addPoint = function (point) {
          var x = Belt_HashMap.get(coveredPoints, point);
          return Belt_HashMap.set(coveredPoints, point, x !== undefined ? x + 1 | 0 : 1);
        };
        Belt_Array.forEach(input, (function (param) {
                var match = param[1];
                var y2 = match[1];
                var x2 = match[0];
                var match$1 = param[0];
                var y1 = match$1[1];
                var x1 = match$1[0];
                if (x1 === x2) {
                  for(var y = Math.min(y1, y2) ,y_finish = Math.max(y1, y2); y <= y_finish; ++y){
                    addPoint([
                          x1,
                          y
                        ]);
                  }
                  return ;
                }
                if (y1 !== y2) {
                  return ;
                }
                for(var x = Math.min(x1, x2) ,x_finish = Math.max(x1, x2); x <= x_finish; ++x){
                  addPoint([
                        x,
                        y1
                      ]);
                }
                
              }));
        console.log(Belt_HashMap.valuesToArray(coveredPoints).filter(function (x) {
                  return x >= 2;
                }).length);
        
      }));

var HashMap;

exports.HashMap = HashMap;
exports.PointHash = PointHash;
exports.go = go;
/* PointHash Not a pure module */
