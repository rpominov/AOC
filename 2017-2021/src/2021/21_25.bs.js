// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Tools = require("../Tools.bs.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");

function print(grid) {
  return grid.map(function (line) {
                return line.map(function (x) {
                              switch (x) {
                                case /* R */0 :
                                    return ">";
                                case /* D */1 :
                                    return "v";
                                case /* N */2 :
                                    return ".";
                                
                              }
                            }).join("");
              }).join("\n");
}

function prev(arr, i) {
  return arr[(i - 1 | 0) >= 0 ? i - 1 | 0 : arr.length - 1 | 0];
}

function next(arr, i) {
  return arr[Caml_int32.mod_(i + 1 | 0, arr.length)];
}

function step(grid) {
  var changed = {
    contents: false
  };
  var grid$p = grid.map(function (line) {
        return line.map(function (x, i, param) {
                    var match = prev(line, i);
                    var match$1 = next(line, i);
                    if (match === 0) {
                      switch (x) {
                        case /* R */0 :
                            break;
                        case /* D */1 :
                            return x;
                        case /* N */2 :
                            changed.contents = true;
                            return /* R */0;
                        
                      }
                    }
                    if (x !== 0 || match$1 < 2) {
                      return x;
                    } else {
                      changed.contents = true;
                      return /* N */2;
                    }
                  });
      });
  var grid$p$p = grid$p.map(function (line, i, param) {
        return line.map(function (x, j, param) {
                    var match = prev(grid$p, i);
                    var match$1 = next(grid$p, i);
                    switch (x) {
                      case /* R */0 :
                          return x;
                      case /* D */1 :
                          if (match$1[j] === /* N */2) {
                            changed.contents = true;
                            return /* N */2;
                          } else {
                            return x;
                          }
                      case /* N */2 :
                          if (match[j] === /* D */1) {
                            changed.contents = true;
                            return /* D */1;
                          } else {
                            return x;
                          }
                      
                    }
                  });
      });
  return [
          grid$p$p,
          changed.contents
        ];
}

function run(_res, _grid) {
  while(true) {
    var grid = _grid;
    var res = _res;
    var match = step(grid);
    if (!match[1]) {
      return [
              res,
              grid
            ];
    }
    _grid = match[0];
    _res = res + 1 | 0;
    continue ;
  };
}

AoC.getInput("2021", "25", (function (input_) {
        var input = Tools.lines(input_).map(function (line) {
              return line.split("").map(function (ch) {
                          switch (ch) {
                            case ">" :
                                return /* R */0;
                            case "v" :
                                return /* D */1;
                            default:
                              return /* N */2;
                          }
                        });
            });
        var match = run(1, input);
        console.log(print(match[1]));
        console.log(match[0]);
        
      }));

exports.print = print;
exports.prev = prev;
exports.next = next;
exports.step = step;
exports.run = run;
/*  Not a pure module */
