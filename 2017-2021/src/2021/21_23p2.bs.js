// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Caml = require("rescript/lib/js/caml.js");
var Tools = require("../Tools.bs.js");
var Belt_Id = require("rescript/lib/js/belt_Id.js");
var Belt_Map = require("rescript/lib/js/belt_Map.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

var cmp = Caml.caml_string_compare;

var NodeCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

var arr = [
  [
    "h1",
    "h2",
    "h3",
    "a4"
  ],
  [
    "h1",
    "h2",
    "h3",
    "a4",
    "a3"
  ],
  [
    "h1",
    "h2",
    "h3",
    "a4",
    "a3",
    "a2"
  ],
  [
    "h1",
    "h2",
    "h3",
    "a4",
    "a3",
    "a2",
    "a1"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "b4"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "b4",
    "b3"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "b4",
    "b3",
    "b2"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "b4",
    "b3",
    "b2",
    "b1"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c4"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c4",
    "c3"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c4",
    "c3",
    "c2"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c4",
    "c3",
    "c2",
    "c1"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3",
    "d2"
  ],
  [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3",
    "d2",
    "d1"
  ],
  [
    "h2",
    "h3",
    "a4"
  ],
  [
    "h2",
    "h3",
    "a4",
    "a3"
  ],
  [
    "h2",
    "h3",
    "a4",
    "a3",
    "a2"
  ],
  [
    "h2",
    "h3",
    "a4",
    "a3",
    "a2",
    "a1"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "b4"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "b4",
    "b3"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "b4",
    "b3",
    "b2"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "b4",
    "b3",
    "b2",
    "b1"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c4"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c4",
    "c3"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c4",
    "c3",
    "c2"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "c4",
    "c3",
    "c2",
    "c1"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3",
    "d2"
  ],
  [
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3",
    "d2",
    "d1"
  ],
  [
    "h4",
    "h3",
    "a4"
  ],
  [
    "h4",
    "h3",
    "a4",
    "a3"
  ],
  [
    "h4",
    "h3",
    "a4",
    "a3",
    "a2"
  ],
  [
    "h4",
    "h3",
    "a4",
    "a3",
    "a2",
    "a1"
  ],
  [
    "h4",
    "h5",
    "b4"
  ],
  [
    "h4",
    "h5",
    "b4",
    "b3"
  ],
  [
    "h4",
    "h5",
    "b4",
    "b3",
    "b2"
  ],
  [
    "h4",
    "h5",
    "b4",
    "b3",
    "b2",
    "b1"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "c4"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "c4",
    "c3"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "c4",
    "c3",
    "c2"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "c4",
    "c3",
    "c2",
    "c1"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3",
    "d2"
  ],
  [
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3",
    "d2",
    "d1"
  ],
  [
    "h6",
    "h5",
    "b4"
  ],
  [
    "h6",
    "h5",
    "b4",
    "b3"
  ],
  [
    "h6",
    "h5",
    "b4",
    "b3",
    "b2"
  ],
  [
    "h6",
    "h5",
    "b4",
    "b3",
    "b2",
    "b1"
  ],
  [
    "h6",
    "h5",
    "h4",
    "h3",
    "a4"
  ],
  [
    "h6",
    "h5",
    "h4",
    "h3",
    "a4",
    "a3"
  ],
  [
    "h6",
    "h5",
    "h4",
    "h3",
    "a4",
    "a3",
    "a2"
  ],
  [
    "h6",
    "h5",
    "h4",
    "h3",
    "a4",
    "a3",
    "a2",
    "a1"
  ],
  [
    "h6",
    "h7",
    "c4"
  ],
  [
    "h6",
    "h7",
    "c4",
    "c3"
  ],
  [
    "h6",
    "h7",
    "c4",
    "c3",
    "c2"
  ],
  [
    "h6",
    "h7",
    "c4",
    "c3",
    "c2",
    "c1"
  ],
  [
    "h6",
    "h7",
    "h8",
    "h9",
    "d4"
  ],
  [
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3"
  ],
  [
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3",
    "d2"
  ],
  [
    "h6",
    "h7",
    "h8",
    "h9",
    "d4",
    "d3",
    "d2",
    "d1"
  ],
  [
    "h8",
    "h7",
    "c4"
  ],
  [
    "h8",
    "h7",
    "c4",
    "c3"
  ],
  [
    "h8",
    "h7",
    "c4",
    "c3",
    "c2"
  ],
  [
    "h8",
    "h7",
    "c4",
    "c3",
    "c2",
    "c1"
  ],
  [
    "h8",
    "h7",
    "h6",
    "h5",
    "b4"
  ],
  [
    "h8",
    "h7",
    "h6",
    "h5",
    "b4",
    "b3"
  ],
  [
    "h8",
    "h7",
    "h6",
    "h5",
    "b4",
    "b3",
    "b2"
  ],
  [
    "h8",
    "h7",
    "h6",
    "h5",
    "b4",
    "b3",
    "b2",
    "b1"
  ],
  [
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a4"
  ],
  [
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a4",
    "a3"
  ],
  [
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a4",
    "a3",
    "a2",
    "a1"
  ],
  [
    "h8",
    "h9",
    "d4"
  ],
  [
    "h8",
    "h9",
    "d4",
    "d3"
  ],
  [
    "h8",
    "h9",
    "d4",
    "d3",
    "d2"
  ],
  [
    "h8",
    "h9",
    "d4",
    "d3",
    "d2",
    "d1"
  ],
  [
    "h10",
    "h9",
    "d4"
  ],
  [
    "h10",
    "h9",
    "d4",
    "d3"
  ],
  [
    "h10",
    "h9",
    "d4",
    "d3",
    "d2"
  ],
  [
    "h10",
    "h9",
    "d4",
    "d3",
    "d2",
    "d1"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "c4"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "c4",
    "c3"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "c4",
    "c3",
    "c2"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "c4",
    "c3",
    "c2",
    "c1"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b4"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b4",
    "b3"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b4",
    "b3",
    "b2"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b4",
    "b3",
    "b2",
    "b1"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a4"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a4",
    "a3"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a4",
    "a3",
    "a2"
  ],
  [
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a4",
    "a3",
    "a2",
    "a1"
  ],
  [
    "h11",
    "h10",
    "h9",
    "d4"
  ],
  [
    "h11",
    "h10",
    "h9",
    "d4",
    "d3"
  ],
  [
    "h11",
    "h10",
    "h9",
    "d4",
    "d3",
    "d2"
  ],
  [
    "h11",
    "h10",
    "h9",
    "d4",
    "d3",
    "d2",
    "d1"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "c4"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "c4",
    "c3"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "c4",
    "c3",
    "c2"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "c4",
    "c3",
    "c2",
    "c1"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b4"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b4",
    "b3"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b4",
    "b3",
    "b2"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "b4",
    "b3",
    "b2",
    "b1"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a4"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a4",
    "a3"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a4",
    "a3",
    "a2"
  ],
  [
    "h11",
    "h10",
    "h9",
    "h8",
    "h7",
    "h6",
    "h5",
    "h4",
    "h3",
    "a4",
    "a3",
    "a2",
    "a1"
  ]
];

var paths = arr.concat(arr.map(Belt_Array.reverse)).map(function (p) {
      return [
              Tools.exn(Tools.$$Array.get(p, 0)),
              Tools.last(p),
              p.slice(1)
            ];
    });

function getCost(pod) {
  if (pod === "b") {
    return 10;
  } else if (pod === "c") {
    return 100;
  } else if (pod === "d") {
    return 1000;
  } else {
    return 1;
  }
}

function classify(node) {
  if (node === "a2") {
    return {
            TAG: /* Room */1,
            _0: "a",
            _1: {
              hd: "a1",
              tl: /* [] */0
            },
            _2: 2
          };
  } else if (node === "a3") {
    return {
            TAG: /* Room */1,
            _0: "a",
            _1: {
              hd: "a2",
              tl: {
                hd: "a1",
                tl: /* [] */0
              }
            },
            _2: 1
          };
  } else if (node === "a4") {
    return {
            TAG: /* Room */1,
            _0: "a",
            _1: {
              hd: "a3",
              tl: {
                hd: "a2",
                tl: {
                  hd: "a1",
                  tl: /* [] */0
                }
              }
            },
            _2: 0
          };
  } else if (node === "b1") {
    return {
            TAG: /* Room */1,
            _0: "b",
            _1: /* [] */0,
            _2: 3
          };
  } else if (node === "b2") {
    return {
            TAG: /* Room */1,
            _0: "b",
            _1: {
              hd: "b1",
              tl: /* [] */0
            },
            _2: 2
          };
  } else if (node === "b3") {
    return {
            TAG: /* Room */1,
            _0: "b",
            _1: {
              hd: "b2",
              tl: {
                hd: "b1",
                tl: /* [] */0
              }
            },
            _2: 1
          };
  } else if (node === "b4") {
    return {
            TAG: /* Room */1,
            _0: "b",
            _1: {
              hd: "b3",
              tl: {
                hd: "b2",
                tl: {
                  hd: "b1",
                  tl: /* [] */0
                }
              }
            },
            _2: 0
          };
  } else if (node === "c1") {
    return {
            TAG: /* Room */1,
            _0: "c",
            _1: /* [] */0,
            _2: 3
          };
  } else if (node === "c2") {
    return {
            TAG: /* Room */1,
            _0: "c",
            _1: {
              hd: "c1",
              tl: /* [] */0
            },
            _2: 2
          };
  } else if (node === "c3") {
    return {
            TAG: /* Room */1,
            _0: "c",
            _1: {
              hd: "c2",
              tl: {
                hd: "c1",
                tl: /* [] */0
              }
            },
            _2: 1
          };
  } else if (node === "c4") {
    return {
            TAG: /* Room */1,
            _0: "c",
            _1: {
              hd: "c3",
              tl: {
                hd: "c2",
                tl: {
                  hd: "c1",
                  tl: /* [] */0
                }
              }
            },
            _2: 0
          };
  } else if (node === "d1") {
    return {
            TAG: /* Room */1,
            _0: "d",
            _1: /* [] */0,
            _2: 3
          };
  } else if (node === "d2") {
    return {
            TAG: /* Room */1,
            _0: "d",
            _1: {
              hd: "d1",
              tl: /* [] */0
            },
            _2: 2
          };
  } else if (node === "d3") {
    return {
            TAG: /* Room */1,
            _0: "d",
            _1: {
              hd: "d2",
              tl: {
                hd: "d1",
                tl: /* [] */0
              }
            },
            _2: 1
          };
  } else if (node === "d4") {
    return {
            TAG: /* Room */1,
            _0: "d",
            _1: {
              hd: "d3",
              tl: {
                hd: "d2",
                tl: {
                  hd: "d1",
                  tl: /* [] */0
                }
              }
            },
            _2: 0
          };
  } else if (node === "h1") {
    return {
            TAG: /* Hallway */0,
            _0: 2,
            _1: 4,
            _2: 6,
            _3: 8
          };
  } else if (node === "h2") {
    return {
            TAG: /* Hallway */0,
            _0: 1,
            _1: 3,
            _2: 5,
            _3: 7
          };
  } else if (node === "h9" || node === "h7" || node === "h5" || node === "h3") {
    return {
            TAG: /* Hallway */0,
            _0: 0,
            _1: 0,
            _2: 0,
            _3: 0
          };
  } else if (node === "h4") {
    return {
            TAG: /* Hallway */0,
            _0: 1,
            _1: 1,
            _2: 3,
            _3: 5
          };
  } else if (node === "h6") {
    return {
            TAG: /* Hallway */0,
            _0: 3,
            _1: 1,
            _2: 1,
            _3: 3
          };
  } else if (node === "h8") {
    return {
            TAG: /* Hallway */0,
            _0: 5,
            _1: 3,
            _2: 1,
            _3: 1
          };
  } else if (node === "h10") {
    return {
            TAG: /* Hallway */0,
            _0: 7,
            _1: 5,
            _2: 3,
            _3: 1
          };
  } else if (node === "h11") {
    return {
            TAG: /* Hallway */0,
            _0: 8,
            _1: 6,
            _2: 4,
            _3: 2
          };
  } else {
    return {
            TAG: /* Room */1,
            _0: "a",
            _1: /* [] */0,
            _2: 3
          };
  }
}

function roomsDist(a, b) {
  if (a === "a") {
    if (b === "b") {
      return 2;
    } else if (b === "c") {
      return 4;
    } else if (b === "d") {
      return 6;
    } else {
      return 0;
    }
  } else if (a === "b") {
    if (b === "a" || b === "c") {
      return 2;
    } else if (b === "d") {
      return 4;
    } else {
      return 0;
    }
  } else if (a === "c") {
    if (b === "a") {
      return 4;
    } else if (b === "b" || b === "d") {
      return 2;
    } else {
      return 0;
    }
  } else if (a === "d") {
    if (b === "a") {
      return 6;
    } else if (b === "b") {
      return 4;
    } else if (b === "c") {
      return 2;
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}

function canStartAt(pod, pos, state) {
  var match = classify(pos);
  if (match.TAG === /* Hallway */0 || match._0 !== pod) {
    return true;
  } else {
    return Belt_List.some(match._1, (function (n) {
                  return Belt_Map.get(state, n) !== pod;
                }));
  }
}

function canEndAt(pod, pos, state) {
  var match = classify(pos);
  if (match.TAG === /* Hallway */0) {
    return true;
  } else if (match._0 === pod) {
    return Belt_List.every(match._1, (function (n) {
                  return Belt_Map.get(state, n) === pod;
                }));
  } else {
    return false;
  }
}

function allowedPaths(state) {
  return Belt_Map.toArray(state).flatMap(function (param) {
              var pod = param[1];
              var node = param[0];
              if (canStartAt(pod, node, state)) {
                return paths.filter(function (param) {
                            if (param[0] === node && canEndAt(pod, param[1], state)) {
                              return param[2].every(function (n) {
                                          return !Belt_Map.has(state, n);
                                        });
                            } else {
                              return false;
                            }
                          });
              } else {
                return [];
              }
            });
}

function isDone(state) {
  return Belt_Map.every(state, (function (k, v) {
                var match = classify(k);
                if (match.TAG === /* Hallway */0) {
                  return false;
                } else {
                  return match._0 === v;
                }
              }));
}

function minCost(state) {
  return Belt_Map.reduce(state, 0, (function (acc, k, v) {
                var match = classify(k);
                var tmp;
                if (match.TAG === /* Hallway */0) {
                  tmp = (
                    v === "b" ? match._1 : (
                        v === "c" ? match._2 : (
                            v === "d" ? match._3 : match._0
                          )
                      )
                  ) + 1 | 0;
                } else {
                  var roomPod = match._0;
                  tmp = roomPod === v ? 0 : (match._2 + roomsDist(roomPod, v) | 0) + 2 | 0;
                }
                return acc + Math.imul(tmp, getCost(v)) | 0;
              }));
}

function findBest(_best, _jobs) {
  while(true) {
    var jobs = _jobs;
    var best = _best;
    var match = Tools.$$Array.get(jobs, 0);
    if (match === undefined) {
      return best;
    }
    var state = match[1];
    var cost = match[0];
    var jobs$p = Tools.rest(jobs);
    if (isDone(state)) {
      console.log(cost);
      _jobs = jobs$p;
      _best = cost;
      continue ;
    }
    if ((cost + minCost(state) | 0) >= best) {
      _jobs = jobs$p;
      continue ;
    }
    var paths = allowedPaths(state);
    if (paths.length !== 0) {
      _jobs = Tools.filterMap(paths, (function(best,cost,state){
            return function (param) {
              var first = param[0];
              var pod = Belt_Map.get(state, first);
              var cost$p = cost + Math.imul(param[2].length, getCost(pod)) | 0;
              if (best <= cost$p) {
                return ;
              }
              var state$p = Belt_Map.set(Belt_Map.remove(state, first), param[1], pod);
              return [
                      cost$p,
                      state$p
                    ];
            }
            }(best,cost,state))).concat(jobs$p);
      continue ;
    }
    _jobs = jobs$p;
    continue ;
  };
}

AoC.getInput("2021", "23", (function (input) {
        var initialState = Belt_Map.fromArray(Belt_Array.zip([
                  "a4",
                  "b4",
                  "c4",
                  "d4",
                  "a1",
                  "b1",
                  "c1",
                  "d1",
                  "a3",
                  "b3",
                  "c3",
                  "d3",
                  "a2",
                  "b2",
                  "c2",
                  "d2"
                ], Tools.filterMap((input + "DCBADBAC").split(""), (function (ch) {
                        switch (ch) {
                          case "A" :
                              return "a";
                          case "B" :
                              return "b";
                          case "C" :
                              return "c";
                          case "D" :
                              return "d";
                          default:
                            return ;
                        }
                      }))), NodeCmp);
        console.log(findBest(1000000, [[
                    0,
                    initialState
                  ]]));
        
      }));

var List;

var $$Map;

exports.List = List;
exports.$$Map = $$Map;
exports.NodeCmp = NodeCmp;
exports.paths = paths;
exports.getCost = getCost;
exports.classify = classify;
exports.roomsDist = roomsDist;
exports.canStartAt = canStartAt;
exports.canEndAt = canEndAt;
exports.allowedPaths = allowedPaths;
exports.isDone = isDone;
exports.minCost = minCost;
exports.findBest = findBest;
/* NodeCmp Not a pure module */
