// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Tools = require("../Tools.bs.js");
var StringSet = require("../StringSet.bs.js");
var Belt_MutableMapString = require("rescript/lib/js/belt_MutableMapString.js");

AoC.getInput("2017", "24", (function (input) {
        var components = Tools.lines(input).map(function (line) {
              return Tools.exn(Tools.array_to_pair(line.split("/").map(function (prim) {
                                  return parseInt(prim, 10);
                                })));
            });
        var findBridge = function (sortBy) {
          var memo = Belt_MutableMapString.make(undefined);
          var helper = function (usedIndices, firstPort) {
            var key = StringSet.toString(usedIndices) + firstPort.toString();
            var result = Belt_MutableMapString.get(memo, key);
            if (result !== undefined) {
              return result;
            }
            var options = components.flatMap(function (param, i, param$1) {
                  var p2 = param[1];
                  var p1 = param[0];
                  if (StringSet.has(usedIndices, i)) {
                    return [];
                  }
                  if (p1 === firstPort) {
                    var match = helper(StringSet.add(usedIndices, i), p2);
                    return [[
                              match[0] + 1 | 0,
                              (match[1] + p1 | 0) + p2 | 0
                            ]];
                  }
                  if (p2 !== firstPort) {
                    return [];
                  }
                  var match$1 = helper(StringSet.add(usedIndices, i), p1);
                  return [[
                            match$1[0] + 1 | 0,
                            (match$1[1] + p1 | 0) + p2 | 0
                          ]];
                });
            var result$1 = options.length > 0 ? options.sort(Curry.__2(sortBy))[0] : [
                0,
                0
              ];
            Belt_MutableMapString.set(memo, key, result$1);
            return result$1;
          };
          return helper(StringSet.empty, 0)[1];
        };
        var __x = findBridge(function (a, b) {
              return b[1] - a[1] | 0;
            });
        console.log("part 1:", __x);
        var __x$1 = findBridge(function (a, b) {
              var x = b[0] - a[0] | 0;
              if (x !== 0) {
                return x;
              } else {
                return b[1] - a[1] | 0;
              }
            });
        console.log("part 2:", __x$1);
        
      }));

var $$Set;

var $$Map;

exports.$$Set = $$Set;
exports.$$Map = $$Map;
/*  Not a pure module */
