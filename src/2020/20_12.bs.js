// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Tools = require("../Tools.bs.js");
var Pervasives = require("rescript/lib/js/pervasives.js");

function rotate(_d, _angle) {
  while(true) {
    var angle = _angle;
    var d = _d;
    if (angle === 0) {
      return d;
    }
    var tmp;
    switch (d) {
      case /* N */0 :
          tmp = /* E */1;
          break;
      case /* E */1 :
          tmp = /* S */2;
          break;
      case /* S */2 :
          tmp = /* W */3;
          break;
      case /* W */3 :
          tmp = /* N */0;
          break;
      
    }
    _angle = angle - 90 | 0;
    _d = tmp;
    continue ;
  };
}

function rotatePoint(_angle, _x, _y) {
  while(true) {
    var y = _y;
    var x = _x;
    var angle = _angle;
    if (angle === 0) {
      return [
              x,
              y
            ];
    }
    _y = -x | 0;
    _x = y;
    _angle = angle - 90 | 0;
    continue ;
  };
}

function go1(_i, instructions, _direction, _x, _y) {
  while(true) {
    var y = _y;
    var x = _x;
    var direction = _direction;
    var i = _i;
    if (i >= instructions.length) {
      return Pervasives.abs(x) + Pervasives.abs(y) | 0;
    }
    var instruction = instructions[i].slice(0, 1);
    var argument = parseInt(instructions[i].slice(1), 10);
    switch (instruction) {
      case "E" :
          _x = x + argument | 0;
          _i = i + 1 | 0;
          continue ;
      case "F" :
          switch (direction) {
            case /* N */0 :
                _y = y + argument | 0;
                _i = i + 1 | 0;
                continue ;
            case /* E */1 :
                _x = x + argument | 0;
                _i = i + 1 | 0;
                continue ;
            case /* S */2 :
                _y = y - argument | 0;
                _i = i + 1 | 0;
                continue ;
            case /* W */3 :
                _x = x - argument | 0;
                _i = i + 1 | 0;
                continue ;
            
          }
      case "L" :
          _direction = rotate(direction, 360 - argument | 0);
          _i = i + 1 | 0;
          continue ;
      case "N" :
          _y = y + argument | 0;
          _i = i + 1 | 0;
          continue ;
      case "R" :
          _direction = rotate(direction, argument);
          _i = i + 1 | 0;
          continue ;
      case "S" :
          _y = y - argument | 0;
          _i = i + 1 | 0;
          continue ;
      case "W" :
          _x = x - argument | 0;
          _i = i + 1 | 0;
          continue ;
      default:
        return Pervasives.failwith(instruction);
    }
  };
}

function go2(_i, instructions, _wpX, _wpY, _x, _y) {
  while(true) {
    var y = _y;
    var x = _x;
    var wpY = _wpY;
    var wpX = _wpX;
    var i = _i;
    if (i >= instructions.length) {
      return Pervasives.abs(x) + Pervasives.abs(y) | 0;
    }
    var instruction = instructions[i].slice(0, 1);
    var argument = parseInt(instructions[i].slice(1), 10);
    switch (instruction) {
      case "E" :
          _wpX = wpX + argument | 0;
          _i = i + 1 | 0;
          continue ;
      case "F" :
          _y = y + Math.imul(wpY, argument) | 0;
          _x = x + Math.imul(wpX, argument) | 0;
          _i = i + 1 | 0;
          continue ;
      case "L" :
          var match = rotatePoint(360 - argument | 0, wpX, wpY);
          _wpY = match[1];
          _wpX = match[0];
          _i = i + 1 | 0;
          continue ;
      case "N" :
          _wpY = wpY + argument | 0;
          _i = i + 1 | 0;
          continue ;
      case "R" :
          var match$1 = rotatePoint(argument, wpX, wpY);
          _wpY = match$1[1];
          _wpX = match$1[0];
          _i = i + 1 | 0;
          continue ;
      case "S" :
          _wpY = wpY - argument | 0;
          _i = i + 1 | 0;
          continue ;
      case "W" :
          _wpX = wpX - argument | 0;
          _i = i + 1 | 0;
          continue ;
      default:
        return Pervasives.failwith(instruction);
    }
  };
}

AoC.getInput("2020", "12", (function (input) {
        var __x = go1(0, Tools.lines(input), /* E */1, 0, 0);
        console.log("part 1:", __x);
        var __x$1 = go2(0, Tools.lines(input), 10, 1, 0, 0);
        console.log("part 2:", __x$1);
        
      }));

exports.rotate = rotate;
exports.rotatePoint = rotatePoint;
exports.go1 = go1;
exports.go2 = go2;
/*  Not a pure module */
