// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Point = require("../Point.bs.js");
var Tools = require("../Tools.bs.js");
var Belt_HashMap = require("rescript/lib/js/belt_HashMap.js");

function findPath(riskMap) {
  var end = Point.make(Tools.exn(Tools.$$Array.get(riskMap, 0)).length - 1 | 0, riskMap.length - 1 | 0);
  var start = Point.make(0, 0);
  var known = Belt_HashMap.make(Math.imul(end.x + 1 | 0, end.y + 1 | 0), Point.Hashable);
  Belt_HashMap.set(known, end, Tools.exn(Point.arrAt(riskMap, end)));
  var updatedAtPrevStep = [end];
  while(updatedAtPrevStep.length > 0) {
    updatedAtPrevStep = updatedAtPrevStep.map(function (updated) {
            return Tools.filterMap([
                        [
                          -1,
                          0
                        ],
                        [
                          1,
                          0
                        ],
                        [
                          0,
                          -1
                        ],
                        [
                          0,
                          1
                        ]
                      ], (function (direction) {
                          var point = Point.shiftBy(updated, direction);
                          if (!Point.inRange(point, start, end)) {
                            return ;
                          }
                          var $$new = Belt_HashMap.get(known, updated) + Tools.exn(Point.arrAt(riskMap, point)) | 0;
                          var x = Belt_HashMap.get(known, point);
                          if (x !== undefined && x <= $$new) {
                            return ;
                          } else {
                            Belt_HashMap.set(known, point, $$new);
                            return point;
                          }
                        }));
          }).flat();
  };
  return Tools.exn(Belt_HashMap.get(known, start)) - Tools.exn(Point.arrAt(riskMap, start)) | 0;
}

function replicate(orig) {
  return Tools.range(0, 4).map(function (b) {
                return orig.map(function (line) {
                            return Tools.range(0, 4).map(function (a) {
                                            return line.map(function (v) {
                                                        return (v + a | 0) + b | 0;
                                                      });
                                          }).flat().map(function (v) {
                                        if (v > 9) {
                                          return v - 9 | 0;
                                        } else {
                                          return v;
                                        }
                                      });
                          });
              }).flat();
}

AoC.getInput("2021", "15", (function (input_) {
        var input = Tools.lines(input_).map(function (line) {
              return line.split("").map(function (prim) {
                          return parseInt(prim, 10);
                        });
            });
        console.log(findPath(input));
        console.log(findPath(replicate(input)));
        
      }));

var $$Map;

exports.$$Map = $$Map;
exports.findPath = findPath;
exports.replicate = replicate;
/*  Not a pure module */
