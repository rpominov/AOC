// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Tools = require("../Tools.bs.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");

function wr(v, at) {
  var x = Caml_int32.mod_(v, at);
  if (x !== 0) {
    return x;
  } else {
    return at;
  }
}

function getWinner(winScore, p1pos, p2pos, p1score, p2score, turn, rollsSum) {
  if (turn === 2) {
    var p2pos$p = wr(p2pos + rollsSum | 0, 10);
    var p2score$p = p2score + p2pos$p | 0;
    if (p2score$p >= winScore) {
      return {
              TAG: /* Ok */0,
              _0: 2
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: [
                p1pos,
                p2pos$p,
                p1score,
                p2score$p,
                1
              ]
            };
    }
  }
  var p1pos$p = wr(p1pos + rollsSum | 0, 10);
  var p1score$p = p1score + p1pos$p | 0;
  if (p1score$p >= winScore) {
    return {
            TAG: /* Ok */0,
            _0: 1
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: [
              p1pos$p,
              p2pos,
              p1score$p,
              p2score,
              2
            ]
          };
  }
}

AoC.getInput("2021", "21", (function (input_) {
        var input = Tools.lines(input_).map(function (line) {
              return parseInt(Tools.exn(Tools.$$Array.get(line.split(": "), 1)), 10);
            });
        var p1start = Tools.exn(Tools.$$Array.get(input, 0));
        var p2start = Tools.exn(Tools.$$Array.get(input, 1));
        var play = function (_p1pos, _p2pos, _p1score, _p2score, _turn, _roll) {
          while(true) {
            var roll = _roll;
            var turn = _turn;
            var p2score = _p2score;
            var p1score = _p1score;
            var p2pos = _p2pos;
            var p1pos = _p1pos;
            var match = getWinner(1000, p1pos, p2pos, p1score, p2score, turn, (wr(roll, 100) + wr(roll + 1 | 0, 100) | 0) + wr(roll + 2 | 0, 100) | 0);
            if (match.TAG === /* Ok */0) {
              if (match._0 === 2) {
                return Math.imul(p1score, roll + 2 | 0);
              } else {
                return Math.imul(p2score, roll + 2 | 0);
              }
            }
            var match$1 = match._0;
            _roll = roll + 3 | 0;
            _turn = match$1[4];
            _p2score = match$1[3];
            _p1score = match$1[2];
            _p2pos = match$1[1];
            _p1pos = match$1[0];
            continue ;
          };
        };
        console.log(play(p1start, p2start, 0, 0, 1, 1));
        var splits = {
          hd: [
            3,
            1
          ],
          tl: {
            hd: [
              4,
              3
            ],
            tl: {
              hd: [
                5,
                6
              ],
              tl: {
                hd: [
                  6,
                  7
                ],
                tl: {
                  hd: [
                    7,
                    6
                  ],
                  tl: {
                    hd: [
                      8,
                      3
                    ],
                    tl: {
                      hd: [
                        9,
                        1
                      ],
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          }
        };
        var count = function (_p1wins, _p2wins, _jobs) {
          while(true) {
            var jobs = _jobs;
            var p2wins = _p2wins;
            var p1wins = _p1wins;
            if (!jobs) {
              return Math.max(p1wins, p2wins);
            }
            var jobs$p = jobs.tl;
            var match = jobs.hd;
            var uniCount = match[6];
            var match$1 = getWinner(21, match[0], match[1], match[2], match[3], match[4], match[5]);
            if (match$1.TAG === /* Ok */0) {
              if (match$1._0 === 2) {
                _jobs = jobs$p;
                _p2wins = p2wins + uniCount;
                continue ;
              }
              _jobs = jobs$p;
              _p1wins = p1wins + uniCount;
              continue ;
            }
            var match$2 = match$1._0;
            var turn$p = match$2[4];
            var p2score$p = match$2[3];
            var p1score$p = match$2[2];
            var p2pos$p = match$2[1];
            var p1pos$p = match$2[0];
            _jobs = Belt_List.concat(Belt_List.map(splits, (function(uniCount,p1pos$p,p2pos$p,p1score$p,p2score$p,turn$p){
                    return function (param) {
                      return [
                              p1pos$p,
                              p2pos$p,
                              p1score$p,
                              p2score$p,
                              turn$p,
                              param[0],
                              param[1] * uniCount
                            ];
                    }
                    }(uniCount,p1pos$p,p2pos$p,p1score$p,p2score$p,turn$p))), jobs$p);
            continue ;
          };
        };
        console.log(count(0, 0, Belt_List.map(splits, (function (param) {
                        return [
                                p1start,
                                p2start,
                                0,
                                0,
                                1,
                                param[0],
                                param[1]
                              ];
                      }))));
        
      }));

var List;

exports.List = List;
exports.wr = wr;
exports.getWinner = getWinner;
/*  Not a pure module */
