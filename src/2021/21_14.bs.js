// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Int64 = require("rescript/lib/js/int64.js");
var Tools = require("../Tools.bs.js");
var Caml_int64 = require("rescript/lib/js/caml_int64.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");

function collect(pairs) {
  return Tools.reduce(pairs, undefined, (function (acc, param) {
                var k = param[0];
                return Belt_MapString.set(acc, k, Caml_int64.add(Belt_MapString.getWithDefault(acc, k, Int64.zero), param[1]));
              }));
}

AoC.getInput("2021", "14", (function (input_) {
        var match = input_.split("\n\n");
        var match$1;
        if (match.length !== 2) {
          match$1 = Pervasives.failwith("bad input");
        } else {
          var a = match[0];
          var b = match[1];
          match$1 = [
            a.split(""),
            Belt_MapString.fromArray(Tools.lines(b).map(function (line) {
                      var match = line.split(" -> ");
                      if (match.length !== 2) {
                        return Pervasives.failwith("bad line: " + line);
                      }
                      var c = match[0];
                      var d = match[1];
                      return [
                              c,
                              d
                            ];
                    }))
          ];
        }
        var rules = match$1[1];
        var seq = match$1[0];
        var arr = Tools.sort(Belt_MapString.toArray(collect(Belt_MapString.toArray(Tools.reduce(Tools.range(1, 40), collect(Tools.filterMap(seq.map(function (a, i, param) {
                                              return Belt_Option.map(Tools.$$Array.get(seq, i + 1 | 0), (function (b) {
                                                            return [
                                                                    a + b,
                                                                    Int64.one
                                                                  ];
                                                          }));
                                            }), (function (x) {
                                            return x;
                                          }))), (function (acc, param) {
                                    return collect(Belt_MapString.toArray(acc).map(function (param) {
                                                      var count = param[1];
                                                      var pair = param[0];
                                                      var x = Belt_MapString.get(rules, pair);
                                                      if (x !== undefined) {
                                                        return [
                                                                [
                                                                  pair[0] + x,
                                                                  count
                                                                ],
                                                                [
                                                                  x + pair[1],
                                                                  count
                                                                ]
                                                              ];
                                                      } else {
                                                        return [[
                                                                  pair,
                                                                  count
                                                                ]];
                                                      }
                                                    }).flat());
                                  }))).map(function (param) {
                            return [
                                    param[0][1],
                                    param[1]
                                  ];
                          }))).map(function (param) {
                  var v = param[1];
                  if (param[0] === Tools.exn(Tools.$$Array.get(seq, 0))) {
                    return Caml_int64.add(v, Int64.one);
                  } else {
                    return v;
                  }
                }), Int64.compare);
        console.log(Int64.to_string(Caml_int64.sub(Tools.last(arr), Tools.exn(Tools.$$Array.get(arr, 0)))));
        
      }));

var $$Map;

var $$Option;

exports.$$Map = $$Map;
exports.$$Option = $$Option;
exports.collect = collect;
/*  Not a pure module */
