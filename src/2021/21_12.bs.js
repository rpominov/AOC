// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var AoC = require("../AoC.bs.js");
var Tools = require("../Tools.bs.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");

function addPath(mapping, a, b) {
  return Belt_MapString.set(mapping, a, [b].concat(Belt_MapString.getWithDefault(mapping, a, [])));
}

function isBig(cave) {
  return cave.toUpperCase() === cave;
}

function canVisit1(visited, cave) {
  if (cave.toUpperCase() === cave) {
    return true;
  } else {
    return !visited.includes(cave);
  }
}

function canVisit2(visited, cave) {
  if (cave.toUpperCase() === cave || !visited.includes(cave)) {
    return true;
  } else if (cave !== "start") {
    return !visited.some(function (x, i, a) {
                if (x.toUpperCase() !== x) {
                  return a.slice(i + 1 | 0).includes(x);
                } else {
                  return false;
                }
              });
  } else {
    return false;
  }
}

function getPathsToTheEnd(mapping, visited, current) {
  if (current === "end") {
    return [visited];
  }
  if (!canVisit2(visited, current)) {
    return [];
  }
  var partial_arg = visited.concat([current]);
  return Belt_MapString.getWithDefault(mapping, current, []).flatMap(function (param) {
              return getPathsToTheEnd(mapping, partial_arg, param);
            });
}

AoC.getInput("2021", "12", (function (input_) {
        var mapping = Tools.reduce(Tools.lines(input_), undefined, (function (acc, line) {
                var match = line.split("-");
                if (match.length !== 2) {
                  return Pervasives.failwith(line);
                }
                var a = match[0];
                var b = match[1];
                return addPath(addPath(acc, a, b), b, a);
              }));
        console.log(getPathsToTheEnd(mapping, [], "start").length);
        
      }));

var $$Map;

exports.$$Map = $$Map;
exports.addPath = addPath;
exports.isBig = isBig;
exports.canVisit1 = canVisit1;
exports.canVisit2 = canVisit2;
exports.getPathsToTheEnd = getPathsToTheEnd;
/*  Not a pure module */
